// Copyright (c) 2020 HITCON Agent Contributors
// See CONTRIBUTORS file for the list of HITCON Agent Contributors

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package kofserver;

enum GameState {
  // Error is any (unrecoverable) error condition.
  GAME_ERROR = 0;

  GAME_CREATED = 1;
  GAME_STARTING1 = 2;
  GAME_STARTING2 = 3;
  GAME_RUNNING = 4;
  GAME_REBOOTING1 = 5;
  GAME_REBOOTING2 = 6;
  GAME_DESTROYING = 7;
  GAME_DESTROYED = 8;
  GAME_RECREATING = 9;
}

// Game represents the information regarding each game.
// Each "wipe" of the Virtual Machine state represents one game.
// Every new game starts with a blank virtual machine.
message Game {
  // Name of the game, used to identify the game.
  string name = 1;

  // State of the game.
  GameState state = 2;

  // Scenario Name
  string scenarioName = 3;

  // Scenario YML
  string scenarioYML = 4;
}

// PlayerScore reports the various score of a user.
// It may be for a specific game or for all games.
message PlayerScore {
  // Name of the player that we are reporting.
  string playerName = 1;

  // The total score.
  int64 score = 2;

  // PID uptime in seconds.
  int64 pidUptime = 3;

  // Port uptime in seconds.
  int64 portUptime = 4;
}

// PlayerInfo records the information regarding a player in a particular game.
message PlayerInfo {
  // Name of the player.
  string playerName = 1;
  
  // The port assigned to the player in the game.
  int32 port = 2;

  // PID of the player's process in the game.
  // -1 if the player haven't started any process.
  int32 pid = 3;

  // Is the player's port responsive the last time we try to connect?
  bool portUp = 4;

  // Is the player's process running the last time we check?
  bool pidUp = 5;
}

enum GameEventType {
  EVT_NA = 0; // Unused
  PROC_CREATE = 1;
  PROC_TERMINATE = 2;
  // Not an event, just to indicate error.
  GAME_NOT_FOUND = 3;
  PLAYER_START_GAIN = 4; // Player starts to gain points.
  PLAYER_STOP_GAIN = 5; // Player stops gaining points.
  PROC_OUTPUT = 6;
  GAME_REBOOT = 7;
  GAME_STARTED = 8;
}

// ProcInfo holds the information regarding a process
message ProcInfo {
  int32 pid = 1;
  string name = 2;
  string cmdline = 3;
  double cpu_time = 4; // User+System CPU time in seconds
  int64 memory_usage = 5; // RSS of the process
}

enum GainReason {
  REASON_NONE = 0;
  REASON_PORT = 1;
  REASON_PID = 2;
}

// One of these represents an information about the event.
message GameEvent {
    // What happened to the event?
    GameEventType eventType = 1;

    // Details on the process if eventType is PROC_CREATE or PROC_TERMINATE
    ProcInfo info = 2;
    
    // Name of the player, if involved.
    string playerName = 3;

    // Start or stop gain reason.
    GainReason gainReason = 4;

    // Process outut for PROC_OUTPUT
    bytes procOutput = 5;
}

// ================== API Messages ==================

// NOTE: Req = Request, Rep = Reply/Response

// ErrorCode is the error code used in the APIs.
enum ErrorCode {
  ERROR_NONE = 0; // No error, great.
  ERROR_NOT_IMPLEMENTED = 1; // The author is busy/too lazy.
  ERROR_CREATE_GAME = 2; // Failed to create game.
  ERROR_GAME_NOT_FOUND = 3; // Specified game not found.
  ERROR_USER_ALREADY_EXISTS = 4; // User already exists when registering user.
  ERROR_GAME_ALREADY_EXISTS = 5; // Game already exists when creating game.
  ERROR_GAME_NOT_ALLOW = 6; // Game scenario doesn't allow this operation.
  ERROR_GAME_NOT_RUNNING = 7; // Game's not running.
  ERROR_USER_NOT_REGISTERED = 8; // User/player is not registered in this game.
  ERROR_AGENT_PROBLEM = 9; // There's a problem with the agent.
  ERROR_PLAYER_NOT_FOUND = 10; // Player's not found.
  ERROR_INCORRECT_STATE = 11; // Incorrect state when trying to start or destroy game.
  ERROR_COOLDOWN = 12; // Player need to cool down.
  ERROR_DOOR_CLOSED = 13; // Scenario disallow command after certain time.
}

// Rep (Reply) is a generic response for RPC calls that uses it.
message Rep {
  ErrorCode error = 1;
}

message CreateGameReq {
  string gameName = 1;

  // scenarioName is the scenario that we'll run for this game.
  // scenario defines the VM image used and the various scoring rules.
  string scenarioName = 2;
}

message StartGameReq {
  string gameName = 1;
}

message DestroyGameReq {
  string gameName = 1;
}

message QueryGameReq {
  // Leave empty to list all games.
  string gameName = 1;

  // If true, the reply's games will only contain gameName.
  bool lite = 2;
}

message QueryGameRep {
  // Reply to indicate general status/error.
  Rep reply = 1;

  // The query result.
  repeated Game games = 2;
}

message PlayerRegisterReq {
  // Which game to register for?
  string gameName = 1;

  // Name of the player registering.
  string playerName = 2;
}

message PlayerInfoReq {
  // Which game are querying the player info?
  string gameName = 1;
 
  // Name of the player we want info for? Leave empty for all.
  string playerName = 2;
}

message PlayerInfoRep {
  // Reply to indicate general status/error.
  Rep reply = 1;

  repeated PlayerInfo info = 2;
}

message PlayerIssueSCReq {
  // Which game?
  string gameName = 1;

  // Who's issuing it?
  string playerName = 2;

  // The shell code, base64 encoded.
  string shellCode = 3;
}

message PlayerIssueSCRep {
  // General status
  Rep reply = 1;

  // TODO: More fields on PID and stuffs?
}

message PlayerIssueCmdReq {
  // Which game?
  string gameName = 1;

  // Who's issuing it?
  string playerName = 2;

  // The command.
  string cmd = 3;
}

message PlayerIssueCmdRep {
  // General status
  Rep reply = 1;

  // TODO: More fields on PID and stuffs?
}

message QueryScoreReq {
  // Name of the game to limit result to.
  // Leave it empty to query the sum of scores in all games that happened.
  string gameName = 1;

  // Name of the player to query.
  // Leave it empty to retrieve the score for all players.
  string playerName = 2;
}

message QueryScoreRep {
  // Reply to indicate the general status.
  Rep reply = 1;

  // The list of scores.
  repeated PlayerScore scores = 2;
}

message GameEventListenerReq {
  // Which game to listen for?
  string gameName = 1;
}

service KOFServer {
  // Game lifecycle management APIs.
  // The usual call sequence is:
  // CreateGame() => StartGame() => (Player interacts with the game)
  // => DestroyGame()
  rpc CreateGame(CreateGameReq) returns (Rep) {}
  rpc StartGame(StartGameReq) returns(Rep) {}
  rpc DestroyGame(DestroyGameReq) returns (Rep) {}

  // QueryGame could be used to list all games or a specific game.
  rpc QueryGame(QueryGameReq) returns (QueryGameRep) {}
  
  // Player interactions
  // Register the player for the game, need to be done once per game per player.
  rpc PlayerRegister(PlayerRegisterReq) returns (Rep) {}
  // Get information regarding a player in a specific game.
  rpc PlayerInfo(PlayerInfoReq) returns (PlayerInfoRep) {}

  // PlayerIssueSC allows the player to run shell code on the host.
  rpc PlayerIssueSC(PlayerIssueSCReq) returns (PlayerIssueSCRep) {}
  rpc PlayerIssueCmd(PlayerIssueCmdReq) returns (PlayerIssueCmdRep) {}
  // TODO: rpc PlayerIssueURL(playerIssueURLReq) returns (PlayerIssueURLRep)

  // Scoreboard related
  rpc QueryScore(QueryScoreReq) returns (QueryScoreRep) {}

  // Game event 
  rpc GameEventListener(GameEventListenerReq) returns (stream GameEvent) {}
}
